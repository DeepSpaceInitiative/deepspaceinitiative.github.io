import { parseAspectRatio } from './parseAspectRatio';
export const contentfulLoader = (loaderProps, contentfulParams) => {
    if (process.env.NODE_ENV !== 'production') {
        const missingValues = [];
        if (!loaderProps.src)
            missingValues.push('src');
        if (!loaderProps.width)
            missingValues.push('width');
        if (missingValues.length > 0)
            throw new Error(`Next Image Optimization requires ${missingValues.join(', ')} to be provided. Make sure you pass them as props to the \`next/image\` component. Received: ${JSON.stringify({ src: loaderProps.src, width: loaderProps.width, quality: loaderProps.quality })}`);
        if (loaderProps.src.startsWith('//'))
            throw new Error(`Failed to parse src "${loaderProps.src}" on \`next/image\`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)`);
    }
    let adjustedContentfulParams;
    if (contentfulParams) {
        adjustedContentfulParams = {
            ...contentfulParams,
            q: loaderProps.quality || 100,
            w: loaderProps.width,
            h: contentfulParams.ar ? Math.round(loaderProps.width * parseAspectRatio(contentfulParams.ar)) : undefined,
        };
    }
    else {
        adjustedContentfulParams = {
            q: loaderProps.quality || 100,
            w: loaderProps.width,
        };
    }
    delete adjustedContentfulParams['ar'];
    if (typeof adjustedContentfulParams['h'] === 'undefined')
        delete adjustedContentfulParams['h'];
    if (/\.gif$/gim.test(loaderProps.src)) {
        delete adjustedContentfulParams['w'];
        delete adjustedContentfulParams['h'];
        delete adjustedContentfulParams['fit'];
    }
    return `${loaderProps.src}?${new URLSearchParams(adjustedContentfulParams).toString()}`;
};
//# sourceMappingURL=nextContentfulLoader.js.map