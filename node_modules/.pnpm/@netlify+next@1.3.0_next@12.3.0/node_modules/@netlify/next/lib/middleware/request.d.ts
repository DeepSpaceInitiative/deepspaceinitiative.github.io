import type { NextURL } from 'next/dist/server/web/next-url';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { MiddlewareResponse } from './response';
export interface NextOptions {
    /**
     * Include conditional request headers in the request to the origin.
     * If you do this, you must ensure you check the response for a 304 Not Modified response
     * and handle it and the missing bode accordingly.
     */
    sendConditionalRequest?: boolean;
}
declare type Context = {
    next: (options?: NextOptions) => Promise<Response>;
};
/**
 * Supercharge your Next middleware with Netlify Edge Functions
 */
export declare class MiddlewareRequest extends Request {
    private nextRequest;
    context: Context;
    originalRequest: Request;
    constructor(nextRequest: NextRequest);
    private applyHeaders;
    /**
     * Passes the request to the origin, allowing you to access the response
     */
    next(options?: NextOptions): Promise<MiddlewareResponse>;
    rewrite(destination: string | URL | NextURL, init?: ResponseInit): NextResponse;
    get headers(): Headers;
    get cookies(): import("next/dist/server/web/spec-extension/cookies").NextCookies;
    get geo(): {
        city?: string;
        country?: string;
        region?: string;
        latitude?: string;
        longitude?: string;
    };
    get ip(): string;
    get nextUrl(): string;
    get url(): string;
}
export {};
